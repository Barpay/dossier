# Dossier

Dossier is a Rails engine that turns SQL into reports. Reports can be easily rendered in various formats, like HTML, CSV, and JSON. The SQL can be written by hand or generated by another tool.

## Setup

Install the Dossier gem and create `config/dossier.yml`. This has the same format as Rails' `database.yml`, and can actually just be a symlink: `ln -s config/{database,dossier}.yml`.

## Usage (Extremely Incomplete)

### Reports

In your app, create report classes under `app/reports`, `Report` as the end of the class name. Define a `sql` method that returns the sql string to be sent to the database. 

Any symbols in the query will be replaced by calling methods of the same name in the report.

For example:

```ruby
# app/reports/fancy_ketchup_report.rb
class FancyKetchupReport < Dossier::Report
  def sql 
    'SELECT * FROM ketchups WHERE fancy = true'
  end

  # OR
  
  def sql
    'SELECT * FROM ketchups WHERE brand = :brand'
  end

  def brand
    'Acme'
  end
end
```

To see a report with all the bells and whistles, check out [spec/support/reports/employee_report.rb](spec/support/reports/employee_report.rb).

Dossier will add a route to your app so that `reports/fancy_ketchup` will instantiate and run a `FancyKetchupReport`. It will respond with whatever format was requested; for example `reports/fancy_ketchup.csv` will render the results as CSV.

### Formatting

Dossier makes several of Rails' URL helpers available for use in your reports. For example, in a report of your least profitable accounts, you might want to add a link to change the salesperson assigned to that account.

```ruby
formatter.url_helpers.edit_accounts_path(3)
```

## Running the Tests

- Run `bundle`
- `cp spec/dummy/config/database.yml{.example,}` and edit it so that it can connect to the test database.
- `cd spec/dummy; rake db:create db:schema:load; cd -;` 
- `rspec spec`

## TODO

- Document using hooks and what methods are available in them

## Misc

This project rocks and uses MIT-LICENSE.
